% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dis_names.R
\name{dis_names}
\alias{dis_names}
\title{Validate Names Within Objects}
\usage{
dis_names(x, names, present = FALSE, warn = FALSE, null_valid = TRUE,
    param = NULL, call = NULL, fact_check = "global")
}
\arguments{
\item{x}{Required object; a parameter argument to test.}

\item{names}{Require character vector; the names to test \code{x} for.}

\item{present}{Required logical scalar; if \code{FALSE} (default), an error
    or warning will be generated if the names in \code{names} in the names
    argument are not present. If \code{TRUE}, an error or warning will be
    generated if the names in the \code{names} argument are present.

    For example, if you wish to enforce a rule that a column named \code{outcome}
    is reserved for your function and any object passed to the function therefore
    cannot contain \code{outcome}, you would set \code{present} to \code{TRUE}.

    Alternatively, if you wish to enforce a rule that a column named \code{outcome}
    must be present in any object passed to the function, you would set
    \code{present} to \code{FALSE} (default).}

\item{warn}{Required logical scalar; if \code{FALSE} (default), the function
will throw an error based on the condition specified with the \code{present}
argument. If \code{TRUE}, the function will return a warning instead.}

\item{null_valid}{Required logical scalar; whether the parameter can be \code{NULL}.
If \code{FALSE}, the function will throw an error if \code{x} is \code{NULL}.
Default is \code{TRUE}.}

\item{param}{Optional character scalar; the parameter name. If \code{NULL} (default),
the function will attempt to determine the parameter name from the calling
environment. If nesting functions, it is recommended to provide the parameter
name to ensure the correct parameter is referenced using \code{rlang::caller_arg()}.}

\item{call}{Optional environment; the environment in which the function was called.
If \code{NULL} (default), the function will attempt to determine the calling
environment. If nesting functions, it is recommended to provide the calling
environment to ensure the correct environment is referenced using
\code{rlang::caller_env()}.}

\item{fact_check}{Required character scalar; whether to override fact checking
environment setting. If \code{"global"} (default), \code{dis_character} will
follow the global setting. If \code{"always"}, \code{dis_character} will
ignore any global setting and will always check \code{x}. This argument is
primarily intended for Shiny developers who wish to use \code{disputeR} in
modules. See the vignette on \code{vignette("developing", package = "disputeR")}
for details on how to use this function.}
}
\description{
For any object that can have names, this function can be used to
    enforce requirements either for names that must be present or names that
    cannot be present.
}
\details{
See the vignette on \code{vignette("developing", package = "disputeR")}
    for details about internal validation of arguments for this function.
}
\examples{
# create sample data frame
x <- data.frame(
  a = c(1:5)
)

# define function that requires a column named a and does not allow a column
# named b in the input object
square_a <- function(x){

  ## check inputs with disputeR
  dis_not_missing(.f = rlang::is_missing(x))
  dis_df(x, valid_class = "data.frame")
  dis_names(x, names = "a")
  dis_names(x, names = "b", present = TRUE)

  ## square a
  x$b <- x$a^2

  ## return output
  return(x)

}

# test function
square_a(x)

}
