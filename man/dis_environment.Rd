% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dis_environment.R
\name{dis_environment}
\alias{dis_environment}
\title{Validate Call Argument}
\usage{
dis_environment(x, param = "call", call = rlang::caller_env())
}
\arguments{
\item{x}{Required object; a parameter argument to test.}

\item{param}{Required character scalar; the parameter name. The default value
is \code{"call"}, though this can be modified if you are using a different
name for your environment argument.}

\item{call}{Required environment; the environment in which the function was called.
If nesting \code{dis_param} within another function, it is recommended to provide
the calling environment to ensure the correct environment is referenced using
\code{rlang::caller_env()} (default). If there are multiple levels of nesting,
the \code{call} argument should be used to pass an environment created in the
outermost function.}
}
\value{
This function will return either \code{TRUE} (if the input passes
    all validation checks) or an error message.
}
\description{
This function returns a standard error message for invalid \code{call}
    values. The \code{call} argument is used throughout \code{disputeR} to
    pass the environment of the function being checked.
}
\details{
See the vignette on \code{vignette("performance", package = "disputeR")}
    for details about how to skip internal validation of arguments for this
    function.
}
\examples{
# create example function that uses dis_param()
example <- function(x = rlang::caller_env()){
  dis_environment(x)
}

# example function
example()

}
