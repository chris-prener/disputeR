% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dis_df.R
\name{dis_df}
\alias{dis_df}
\title{Validate Data Frame Arguments}
\usage{
dis_df(x, valid_class = c("data.frame", "tibble", "data.table"), null_valid = TRUE,
    param = NULL, call = NULL, fact_check = "global")
}
\arguments{
\item{x}{Required object; a parameter argument to test.}

\item{valid_class}{Required character vector; list of possible variations of
data frames. If a given type is passed to \code{valid_class}, it will not
trigger a validation error. As of this time, \code{dis_df()} supports
\code{tibble} and \code{data.table}  objects in addition to
\code{base R} data frames. If an object class is omitted from this argument,
objects of that class will result in a validation error.}

\item{null_valid}{Required logical scalar; whether the parameter can be \code{NULL}.
If \code{FALSE}, the function will throw an error if \code{x} is \code{NULL}.
Default is \code{TRUE}.}

\item{param}{Optional character scalar; the parameter name. If \code{NULL} (default),
the function will attempt to determine the parameter name from the calling
environment. If nesting functions, it is recommended to provide the parameter
name to ensure the correct parameter is referenced using \code{rlang::caller_arg()}.}

\item{call}{Optional environment; the environment in which the function was called.
If \code{NULL} (default), the function will attempt to determine the calling
environment. If nesting functions, it is recommended to provide the calling
environment to ensure the correct environment is referenced using
\code{rlang::caller_env()}.}

\item{fact_check}{Required character scalar; whether to override fact checking
environment setting. If \code{"global"} (default), \code{dis_character} will
follow the global setting. If \code{"always"}, \code{dis_character} will
ignore any global setting and will always check \code{x}. This argument is
primarily intended for Shiny developers who wish to use \code{disputeR} in
modules. See the vignette on \code{vignette("developing", package = "disputeR")}
for details on how to use this function.}
}
\value{
This function will return either \code{TRUE} (if \code{x} passes
    all validation checks) or \code{FALSE} (if the validation checks are
    skipped). If \code{x} fails validation checks, an error message will
    be returned. Note that, if the input is \code{NULL} and \code{null_valid}
    is set to \code{TRUE}, the detailed unit tests are skipped and the
    function will return \code{TRUE}.
}
\description{
This function runs standard unit tests on data frame parameters for
    functions.
}
\details{
See the vignette on \code{vignette("developing", package = "disputeR")}
    for details about internal validation of arguments for this function.
}
\examples{
# create example function that uses dis_df()
example <- function(x){

  ## check inputs with disputeR
  dis_not_missing(.f = rlang::is_missing(x))
  dis_df(x, valid_class = "data.frame")

  ## return output
  return(x)

}

# test example function
example(x = mtcars)

}
