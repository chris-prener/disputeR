% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dis_sf.R
\name{dis_sf}
\alias{dis_sf}
\title{Validate sf Object Arguments}
\usage{
dis_sf(x, valid_geometry_name = NULL, valid_geometry_type = NULL,
    valid_crs = NULL, valid_longlat = NULL, null_valid = TRUE, param = NULL,
    call = NULL, fact_check = "global")
}
\arguments{
\item{x}{Required object; a parameter argument to test.}

\item{valid_geometry_name}{Optional character scalar; required name for the
geometry column. If \code{NULL} (default), any name is permissible. If a
character string is included (i.e. \code{"geometry"}, the typical name of
a geometry column), the \code{sf} object must have a geometry column
whose name matches the argument. This test requires that \code{sf} is
installed.}

\item{valid_geometry_type}{Optional character scalar; required geometry type(s)
    for \code{x}. The most common are \code{"POINT"}, \code{"LINESTRING"}, and
    \code{"POLYGON"} as well as the \code{"MULTI"} versions of each
    (\code{"MULTIPOINT"}, \code{"MULTILINESTRING"}, and \code{"MULTIPOLYGON"}).

    Other valid geometry types are \code{"GEOMETRY"} and \code{"GEOMETRYCOLLECTION"},
    which is used for "geometry collections." However, you should note that
    geometry collections will cause errors with some spatial data operations.

    Less common geometry types include \code{"CIRCULARSTRING"}, \code{"COMPOUNDCURVE"},
    \code{"CURVEPOLYGON"}, \code{"MULTICURVE"}, \code{"MULTISURFACE"},
    \code{"CURVE"}, \code{"SURFACE"}, \code{"POLYHEDRALSURFACE"},
    \code{"TIN"}, and \code{"TRIANGLE"}.

    If multiple values are given, \code{x} can be any one  of those values.
    If \code{NULL} (default), this test is skipped. This test requires that
    \code{sf} is installed.}

\item{valid_crs}{Optional character scalar; the required CRS value that
\code{x} must use. If multiple values are given, \code{x} can be any one
of those values. If \code{NULL} (default), this test is skipped. This test
requires that \code{sf} is installed.}

\item{valid_longlat}{Optional logical scalar; if \code{TRUE}, \code{x} must
use a geographic coordinate system. If \code{FALSE}, \code{x} must use a
projected coordinate system. If \code{NULL} (default), this test is skipped.
This test requires that \code{sf} is installed.}

\item{null_valid}{Required logical scalar; whether the parameter can be \code{NULL}.
If \code{FALSE}, the function will throw an error if \code{x} is \code{NULL}.
Default is \code{TRUE}.}

\item{param}{Optional character scalar; the parameter name. If \code{NULL} (default),
the function will attempt to determine the parameter name from the calling
environment. If nesting functions, it is recommended to provide the parameter
name to ensure the correct parameter is referenced using \code{rlang::caller_arg()}.}

\item{call}{Optional environment; the environment in which the function was called.
If \code{NULL} (default), the function will attempt to determine the calling
environment. If nesting functions, it is recommended to provide the calling
environment to ensure the correct environment is referenced using
\code{rlang::caller_env()}.}

\item{fact_check}{Required character scalar; whether to override fact checking
environment setting. If \code{"global"} (default), \code{dis_character} will
follow the global setting. If \code{"always"}, \code{dis_character} will
ignore any global setting and will always check \code{x}. This argument is
primarily intended for Shiny developers who wish to use \code{disputeR} in
modules. See the vignette on \code{vignette("developing", package = "disputeR")}
for details on how to use this function.}
}
\description{
This function runs standard unit tests on sf object parameters for
    functions. If the suggested \code{sf} package is not installed, it will only
    test that \code{x} is an object of class \code{sf}. The remaining checks for
    geometry column name, geometry type, crs, and whether or not a geographic
    coordinate system is acceptable all require that the \code{sf} package
    is installed.
}
\details{
See the vignette on \code{vignette("developing", package = "disputeR")}
    for details about internal validation of arguments for this function.
}
\examples{
# create example function that uses dis_sf()
example <- function(x){

  ## check inputs with disputeR
  dis_not_missing(.f = rlang::is_missing(x))
  dis_sf(x)

  ## return output
  return(x)

}

# test example function
# example(x = sf)

}
