% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dis_logical.R
\name{dis_logical}
\alias{dis_logical}
\title{Validate Logical Arguments}
\usage{
dis_logical(x, null_valid = TRUE, scalar = TRUE, param = NULL, call = NULL)
}
\arguments{
\item{x}{Required object; a parameter argument to test.}

\item{null_valid}{Required logical scalar; whether the parameter can be \code{NULL}.
If \code{FALSE}, the function will throw an error if \code{x} is \code{NULL}.
Default is \code{TRUE}.}

\item{scalar}{Required logical scalar; whether the parameter must be a scalar.
If \code{TRUE} (default), the function will throw an error if \code{x} is
not a scalar.}

\item{param}{Optional character scalar; the parameter name. If \code{NULL} (default),
the function will attempt to determine the parameter name from the calling
environment. If nesting functions, it is recommended to provide the parameter
name to ensure the correct parameter is referenced using \code{rlang::caller_arg()}.}

\item{call}{Optional environment; the environment in which the function was called.
If \code{NULL} (default), the function will attempt to determine the calling
environment. If nesting functions, it is recommended to provide the calling
environment to ensure the correct environment is referenced using
\code{rlang::caller_env()}.}
}
\value{
This function will return either \code{TRUE} (if the input passes
    all validation checks) or an error message. Note that, if the input is \code{NULL}
    and \code{null_valid} is set to \code{TRUE}, the detailed unit tests are
    skipped and the function will return \code{TRUE}.
}
\description{
This function runs standard unit tests on logical parameters for
    functions.
}
\examples{
# create example function that uses dis_character()
example <- function(x){

  ## check inputs with disputeR
  dis_not_missing(.f = missing(x))
  dis_logical(x, null_valid = FALSE)

  ## flip logical input
  out <- !x

  ## return output
  return(out)

}

# test example function
example(x = TRUE)

}
